# Pulse ID data buffer receive
#
# Description:
#
#   This database contains records which provide data received from the data buffer.
#
# Mandatory macros:
#   P = Prefix for all records in the template eg. (SIN-CVME-TIFALL:)
#   ID = Used when multiple instances of the template are loaded.
#   NAME = regDev name as configured with  mrfioc2_regDevConfigure() (e.g. EVR0DBUF)
#  
# Optional macros:
#
#   Macros to define location of data in data buffer:
#     PULSEID_OFFSET = address offset (default: 0x10)
#     MASTSEC_OFFSET = seconds offset (default: 0x18)
#     MASTNSEC_OFFSET = nsec offset (default: 0x1C)
#     MASTUINTCNT_OFFSET = 32-bit master counter offset (default: 0x20)
#
#   The record reading the pulse id from the data buffer is processed via
#   'I/O Intr' when new data buffer data has been received.
#   All other records reading from the data buffer are processed
#   in a forward link chain. The processing can be forwarded to process user
#   defined records using the PULSEID_FLNK macro.
#   At the time the first user record is processed, it is guaranteed that
#   all records reading data buffer data have new data and that the data
#   is from the same machine pulse.
#   Macro to forward processing:
#     PULSEID_FLNK = FLNK to forware processing when PULSEID has been received (default: "")
#   The following macros are obsolete and are only available for backward
#   compatibility:
#     PIDL_FLNK = FLNK to forward processing when pulse id low has been received (default: "")
#     PIDH_FLNK = FLNK to forward processing when pulse id high has been received (default: "")
#     MTS_FLNK = FLNK to forward processing when master timestamp has been received (SEC and NSEC) (default: "")
#     UINTCNT_FLNK = FLNK to forward processing when 32 bit counter has been received (default: "")
#
# Records holding data received via data buffer:
#   $(P)RX$(ID)-PULSEID  | ai      | pulse id
#   $(P)RX$(ID)-PIDH     | ai      | higher 32 bit of pulse id
#   $(P)RX$(ID)-PIDL     | ai      | lower 32 bit of pulse id
#   $(P)RX$(ID)-MTS-SEC  | long in | 32 bit master timestamp seconds
#   $(P)RX$(ID)-MTS-NSEC | long in | 32 bit master timestamp nanoseconds (with embedded pulse id)
#   $(P)RX$(ID)-UINT-CNT | ai      | 32 bit counter (starts from 0 after master restart)
#
# Special purpose records:
#   $(P)RX$(ID)-MTS      | calcout | Holds master timestamp in TIME field. 
#					                          To use it use TSEL field in your record. See below.

record(ai, "$(P)RX$(ID)-PULSEID") {
  field(DESC,"Received pulse ID")
  field(DTYP, "regDev")
  field(INP, "@$(NAME):$(PULSEID_OFFSET=0x10) T=double")
  field(SCAN, "I/O Intr")
  field(PRIO, "HIGH")
  field(FLNK, "$(P)RX$(ID)-PULSEID_FO")
}

# Forward link to performance measurement and then user application.
# Order is deliberatly chosen to make sure we measure performance value
# consistently in all nodes.
record(fanout, "$(P)RX$(ID)-PULSEID_FO") {
  field(LNK1, "$(P)RX$(ID)-JMP-CNT")
  field(LNK2, "$(P)RX$(ID)-MTS-SEC")
}

record(longin,"$(P)RX$(ID)-MTS-SEC") {
  field(DESC,"Master timestamp - seconds") 
  field(DTYP, "regDev")
  field(SCAN, "Passive")
  field(INP, "@$(NAME):$(MASTSEC_OFFSET=0x18) T=UINT32")
  field(PRIO, "HIGH")
  field(FLNK, "$(P)RX$(ID)-MTS-NSEC")  
}

record(longin,"$(P)RX$(ID)-MTS-NSEC") {
  field(DESC,"Master timestamp - nanoseconds") 
  field(DTYP, "regDev")
  field(INP, "@$(NAME):$(MASTNSEC_OFFSET=0x1C) T=UINT32")
  field(PRIO, "HIGH")
  field(FLNK, "$(P)RX$(ID)-UINT-CNT")
}

record(ai,"$(P)RX$(ID)-UINT-CNT") {
  field(DESC,"UINT counter")
  field(DTYP, "regDev")
  field(SCAN, "Passive")
  field(INP, "@$(NAME):$(MASTUINTCNT_OFFSET=0x20) T=UINT32")
  field(PRIO, "HIGH")
  field(FLNK, "$(P)RX$(ID)-UINT-CNT-CALC")
}

## Automatic reset of perf values after master reboots
record(calcout,"$(P)RX$(ID)-UINT-CNT-CALC"){
  field(DESC,"Automatically reset performance values")
  field(CALC,"A<B")
  field(INPA,"$(P)RX$(ID)-UINT-CNT")
  field(INPB,"$(P)RX$(ID)-UINT-CNT-PREV")
  field(OOPT,"When Non-zero")
  field(OUT, "$(P)RX$(ID)-RST-PERF.PROC PP")
  field(FLNK,"$(P)RX$(ID)-UINT-CNT-PREV_")
}

record(calcout,"$(P)RX$(ID)-UINT-CNT-PREV_"){
  field(INPA,"$(P)RX$(ID)-UINT-CNT NPP")
  field(CALC,"A")
  field(OUT, "$(P)RX$(ID)-UINT-CNT-PREV.VAL PP")
}

record(ai, "$(P)RX$(ID)-UINT-CNT-PREV"){
  field(DESC, "UINT counter previous")
  field(FLNK, "$(P)RX$(ID)-PIDL")
}

record(ai,"$(P)RX$(ID)-PIDL") {
  field(DESC,"Pulse ID Lower 32 bit")
  field(DTYP, "regDev")
  field(SCAN, "Passive")
  field(INP, "@$(NAME):$(MASTPIDL_OFFSET=0x24) T=UINT32")
  field(PRIO, "HIGH")
  field(FLNK, "$(P)RX$(ID)-PIDH")
}

record(ai,"$(P)RX$(ID)-PIDH") {
  field(DESC,"Pulse ID Higher 32 bit")
  field(DTYP, "regDev")
  field(SCAN, "Passive")
  field(INP, "@$(NAME):$(MASTPIDH_OFFSET=0x28) T=UINT32")
  field(PRIO, "HIGH")
  field(FLNK, "$(P)RX$(ID)-MTS")
}
  
# reads timestamp from the master SEC and NSEC
# and set the timestamp of this record
# Everey record that wants timestamp of the master sets its TSEL field
# to point to TIME field of this record. See example.
#
# Example: Stamp client record with master timestamp 
#record(stringin,"$(P)RX$(ID)-DUMMY-FROM-TSEL") {
#  field(DESC,"Use timestamp from TSEL and display it as string")
#  field(DTYP,"Soft Timestamp")
#  field(INP, "@%b %d, %Y %H:%M:%S.%09f")
#  field(TSEL,"$(P)RX$(ID)-MTS.TIME")
#  field(PRIO, "HIGH")
#}

record(calcout,"$(P)RX$(ID)-MTS") {
  field(DESC,"Holds master timestamp in TIME field")
  field(DTYP, "Soft SetTimestamp")
  field(INPA,"$(P)RX$(ID)-MTS-SEC")
  field(INPB,"$(P)RX$(ID)-MTS-NSEC")
  field(TSE,"-2")
  field(PRIO, "HIGH")
  field(FLNK,"$(P)RX$(ID)-FLNK_FO")
}

# The following Links are obsolete.
# They are supported for backward compatibility
record(fanout, "$(P)RX$(ID)-FLNK_FO") {
  field(LNK1, "$(PULSEID_FLNK=)")
  field(LNK2, "$(UINTCNT_FLNK=)")
  field(LNK3, "$(MTS_FLNK=)")
  field(LNK4, "$(PIDL_FLNK=)")
  field(LNK5, "$(PIDH_FLNK=)")
}
