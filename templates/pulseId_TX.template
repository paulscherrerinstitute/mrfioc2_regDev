# Pulse ID data buffer transmission
#
# Mandatory macros:
#  SYS = System name (ie FIN)
#  DEVICE = Timing card name (ie EVG0)
#  NAME = regDev name as configured with  mrfioc2_regDevConfigure() (ie EVG0DBUF)
#  
# Optional macros:
#  PULSEID_OFFSET = address offset (0x10)
#  MASTSEC_OFFSET = seconds offset (default: 0x18)
#  MASTNSEC_OFFSET = nsec offset (default: 0x1C)
#  MASTUINTCNT_OFFSET = 32-bit master counter offset (default: 0x20)
#
# Description:
#
# This database transmits the pulse id via databuffer, using Tom Slejko's driver
# (regDev). It loads the pulseId integer into the appropriate register and then flushes
# the buffer.
#
record(ao, "$(P)TX-PULSEID-I") {
  field(DTYP, "regDev")
  field(OUT, "@$(NAME):$(PULSEID_OFFSET=0x10) T=double")
  field(FLNK, "$(P)TX-PULSEID-MASTER-TIMESTAMP")
}

# reads timestamp (of the master) 
# and overwrites the 16 LSB of 32-bits nsec with 16 LSB of pulse ID
# it gives seconds past epics epoch in VAL
# it gives nsec of epics timestamp in RVAL  
#
record(ai,"$(P)TX-PULSEID-MASTER-TIMESTAMP") {
  field(DTYP,"Soft SetTimestamp")
  field(INP,"$(P)TX-PULSEID-I")
  field(TSE,"-2")
  field(FLNK,"$(P)TX-PULSEID-MASTER-TS-SEC")
}

record(calcout,"$(P)TX-PULSEID-MASTER-TS-SEC") {
  field(DTYP, "regDev")
  field(INPA,"$(P)TX-PULSEID-MASTER-TIMESTAMP.VAL")    # master timestamp seconds
  field(CALC,"A")
  field(OUT, "@$(NAME):$(MASTSEC_OFFSET=0x18) T=UINT32")
  field(FLNK,"$(P)TX-PULSEID-MASTER-TS-NSEC")
}

record(calcout,"$(P)TX-PULSEID-MASTER-TS-NSEC") {
  field(DTYP, "regDev")
  field(INPA,"$(P)TX-PULSEID-MASTER-TIMESTAMP.RVAL")   # master timestamp nanoseconds
  field(CALC,"A")
  field(OUT, "@$(NAME):$(MASTNSEC_OFFSET=0x1C) T=UINT32")
  field(FLNK, "$(P)TX-PULSEID-UINT-COUNTER")
}

record(calcout,"$(P)TX-PULSEID-UINT-COUNTER") {
  field(DTYP, "regDev")
  field(INPA,"$(P)TX-PULSEID-UINT-COUNTER.VAL")   # master 32-bits counter
  field(CALC,"A+1")
  field(OUT, "@$(NAME):$(MASTUINTCNT_OFFSET=0x20) T=UINT32")
  field(FLNK, "$(P)TX-PULSEID-Flush_")
}

record(longout, "$(P)TX-PULSEID-Flush_") {
  field(DTYP, "regDev")
  field(OUT, "@$(NAME):0x0")
  field(VAL, "1")
  field(FLNK,"$(P)TX-PULSEID-PERF-CURR_")
}

record(calcout, "$(P)TX-PULSEID_") {
  field(CALC, "A")
  field(INPA, "$(P)TX-PULSEID-PulseCounter")
  field(OUT, "$(P)TX-PULSEID-I PP")
  field(FLNK, "$(P)TX-PULSEID-jump-counter")
}

record(calcout,"$(P)TX-PULSEID-jump-counter") {         
  field(INPA,"$(P)TX-PULSEID_")
  field(INPB,"$(P)TX-PULSEID-jump-counter")
  field(INPC,"$(P)TX-PULSEID-jump-counter.OVAL")
  field(CALC,"A")
  field(OCAL,"A-B#1?C+1:C")
  field(OOPT,"When Non-zero")
  field(DOPT,"Use OCAL")
}

#### measures time interval between pulse ID arraivals ###
record(ai,"$(P)TX-PULSEID-PERF-CURR_") {
  field(DTYP,"Soft Timestamp")
  field(PREC,"9")
  field(PRIO,"HIGH")
  field(FLNK,"$(P)TX-PULSEID-PERF-I")
}

##Time from previous in us
record(calc,"$(P)TX-PULSEID-PERF-I"){
  field(INPA,"$(P)TX-PULSEID-PERF-CURR_ NPP")
  field(INPB,"$(P)TX-PULSEID-PERF-PERF_PREV_ NPP")
  field(CALC,"(A-B)*1000")
  field(PREC,"9")
  field(FLNK,"$(P)TX-PULSEID-PERF-PERF_PREV_")
}

record(ai, "$(P)TX-PULSEID-PERF-PERF_PREV_"){
  field(DESC,"Performance meas previous time")
  field(INP, "$(P)TX-PULSEID-PERF-CURR_ NPP")
  field(PREC,"9" )
  field(FLNK,"$(P)TX-PULSEID-PERF-MAX-I")
}


record(calc,"$(P)TX-PULSEID-PERF-MAX-I"){
  field(INPA,"$(P)TX-PULSEID-PERF-I NPP")
  field(INPB,"$(P)TX-PULSEID-PERF-MAX-I NPP")
  field(CALC,"ABS(10-A) > B ? ABS(10-A) : B")
  field(PREC,"9")
  field(EGU, "ms")
}
